ImixsCrypt Private Server 
~~~~~~~~~~~~~~

 The ImixsCrypt-Private-Server is a web server running on your local machine. 
 This server provides a REST API to manage identities and encrypted data.
 The encrypting API is based on the RSA algorithm.
 
 The ImixsCrypt-Private-Server should never run other than on localhost (127.0.0.1). This is 
 an important part of the privacy concept of ImixsCrypt. To access the server you should
 use the IP Address of your local private network:
 
 {{{http://127.0.0.1:4040}http://127.0.0.1:4040}}
 
 
*The API and Object Classes
~~~~~~~~~~~~~~ 

 The ImixsCrypt core API is based on three simple object classes. 
 
   * IdentityItem
 
   * MessageItem
   
   * AuthItem 
 
 To create or access these objects a REST API is implemented by the ImixsCrypt
 Private and Public servers.
 
**IdentityItem
~~~~~~~~~~~~~~ 
+-------------------+ 
{
 "id": "robin.hood@sherwood.forest",
 "key": "L1I5VR9bAxyjJ..."
} 
+-------------------+ 
 
 The value 'key' is always Base64 encoded. 
 
**MessageItem
~~~~~~~~~~~~~~ 
+-------------------+ 
{
 "sender": "little.john@sherwood.forest",
 "recipient": "robin.hood@sherwood.forest",
 "message": "Have nought but a staff in my hand...",
 "comment": "Important Message",
 "signature": "L1I5VR9bAxyjJ..."
 "created": "14524355"
} 
+-------------------+  

 The values 'message', 'comment' and 'signature' are always Base64 encoded. 

**AuhtItem
~~~~~~~~~~~~~~ 

 (not yet designed)


 
*The Data Management
~~~~~~~~~~~~~~ 
 All RSA keys and encrypted messages managed by the ImixsCrypt Private Server are stored 
 in the local server directory. 
 

*--------------*----------------------------------------------------------------* 
|| Directory   ||  Description                                                 ||
*--------------+----------------------------------------------------------------+
|/keys         | Contains the local key pair.                                   |
|              | id.rsa = private            									|
|              | id.rsa.pub = public key 										|
*--------------+----------------------------------------------------------------+
|/keys/public  | Contains public keys received from a imixs-crypt-public server |
|              | This kind of keys are not verified.  							|
|              | This means the identity could possibly have been corrupted. 	|
*--------------+----------------------------------------------------------------+
|/keys/trusted | Contains trusted public keys.                                	|
|              | You can copy a public key you trust her here.              	|
|              |                                                              	|
*--------------+----------------------------------------------------------------+
|/data/local   | Contains private encrypted messages. These messages are  		|
|              | encrypted with the users local public key.		              	|
|              | These messages can be decrypted with the local private key.	|
*--------------+----------------------------------------------------------------+
|/data/remote  | Contains encrypted messages received from a remote node.		|
|              | These messages can be decrypted with the local private key.	|
|              |                                                              	|
*--------------+----------------------------------------------------------------+
|/data/pending | Contains messages encrypted with a foreign public key to be 	|
|              | send to a remote public node server        					|
|              |                                                              	|
*--------------+----------------------------------------------------------------+
 
 To be sure to have a secure communication with other users you should copy a 
 trusted version of the public key into the /keys/trusted/ directory. 
 For example if you receive a local copy of the public key or you got the public 
 key through a secure pgp encrypted email. 
 
 
 
*The REST API
~~~~~~~~~~~~~~
 The ImixsCrypt-Private-Server provides a local REST API to manage identities and encrypt or
 decrypt messages using the users local RSA private and public key.
 The IdentityService is used to managed key pairs and public keys to encrypt messages.
 The MessageService is used to encrypt or decrypt messages. Encrypted messages
 can be send or received from a remote server node.
 
 
**IdentityService 
~~~~~~~~~~~~~~
 The IdentityService provides methods the manage public keys and local private key pairs.
 To work with a local private RSA key which is password protected a client need to first
 start a new session. To open a new session for a specific identity a client post the private key password. 
 After a session was created a sessionId is stored in a cookie. A client can encrypt or decrypt messages 
 using the sessionId.
 The password and the sessionId used during a session are only stored in-memory.
  
*---------------------*----------*------------------------------------------* 
|| Resource URI       || Method  || Description                            ||
*---------------------+----------+------------------------------------------+
| /identities     	  |GET       |Returns the local public key of the default identity|
|                     |          |The default identity is stored in the 	|
|                     |          |properties and can be set with the POST method|
|                     |          |HTTP-202=no key found, HTTP-200=key found	|
*---------------------+----------+------------------------------------------+
| /identities/(id) 	  |GET       |Returns the local public key for a given identity|
|                     |          |HTTP-202=no key found, HTTP-200=key found	|
*---------------------+----------+------------------------------------------+
| /identities 		  |POST      |Posts a private key password and opens a  |
|                     |          |session for a specific identity.  		|
|                     |          |\{"id":"robin.hood@sherwood.forest","key": "my password"\} |
|                     |          |If no key-pair still exits and a password |
|                     |          |was provided then a new local key pair will be generated.      |
*---------------------+----------+---------------------------------------+
| /identities?node=xxx |POST     |Posts the local public key to a remote  	|
|                     |          |server node. This allows other uses		|
|                     |          |to send encrypted messages.				|
*---------------------+----------+---------------------------------------+
| /identities		  |DELETE    |Closes the current session				|
|                     |          |session for a specific identity.  		|
|                     |          |\{"id":"robin.hood@sherwood.forest","key": ""\} |
*---------------------+----------+---------------------------------------+
 
 All methods receive or return a IdentityItem in JSON format. The key value is always Base64 encoded.
 
 The POST method automatically updates the property "default.identity" with the 
 identity provided in the request. 
   
 


**MessageService 
~~~~~~~~~~~~~~
 The MessageService is used to encrypt messages locally and 
 send encrypted messages through the Internet. 
  
*---------------------*----------*------------------------------------------* 
|| Resource URI       || Method  || Description                            ||
*---------------------+----------+------------------------------------------+
| /messages		      |POST     |Posts a new message. The message will be encrypted  		|
|                     |          |with the receifers public key. If no receifer is defined|
|                     |          |the encrypted message will be stored locally|
*---------------------+----------+------------------------------------------+
| /messages?node=xx	  |POST      |Posts a new message to a remote public node.   		|
|                     |          |The message will be encrypted with the receifers public key|
|                     |          |and transfered to the public node|
*---------------------+----------+------------------------------------------+
| /messages	  		  |GET       |Returns a list with local message headers	|
|                     |          |a message header only contains sender, receifer and signature|
|		   			  |	         |The message need to be get by its message digest		|
|                     |          |											|
*---------------------+----------+------------------------------------------+
| /messages/[DIGEST]  |GET       |Returns a decrypted message for the given message|
|                     |          |message digest|
|                     |          |											|
*---------------------+----------+---------------------------------------+
 
   
  


 
*Property Management
~~~~~~~~~~~~~~
 The Rest API provides a way to read and set properties into the local property file.
 A valid session must be opened before. 
  
*---------------------*----------*------------------------------------------* 
|| Resource URI       || Method  || Description                            ||
*---------------------+----------+------------------------------------------+
| /session/properties/(key) |GET       |Returns the value of a property|
*---------------------+----------+------------------------------------------+
| /session/properties/(key) |POST      |Set a new value of a property |
*---------------------+----------+---------------------------------------+
 