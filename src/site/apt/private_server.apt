ImixsCrypt Private Server 
~~~~~~~~~~~~~~

 The ImixsCrypt-Private-Server is a web server running on your local machine. 
 This server provides a REST API to manage identities and encrypted data.
 The encrypting API is based on the RSA algorithm.
 
 The ImixsCrypt-Private-Server should never run other than on localhost (127.0.0.1). This is 
 an important part of the privacy concept of ImixsCrypt. To access the server you should
 use the IP Address of your local private network:
 
 {{{http://127.0.0.1:4040}http://127.0.0.1:4040}}
 
 
*The API and Object Classes
~~~~~~~~~~~~~~ 

 The ImixsCrypt core API is based on three simple object classes. 
 
   * IdentityItem
 
   * MessageItem
   
   * AuthItem 
 
 To create or access these objects a REST API is implemented by the ImixsCrypt
 Private and Public servers.
 
**IdentityItem
~~~~~~~~~~~~~~ 
+-------------------+ 
{
 "id": "robin.hood@sherwood.forest",
 "key": "L1I5VR9bAxyjJ..."
} 
+-------------------+ 
 
 The value 'key' is always Base64 encoded. 
 
**MessageItem
~~~~~~~~~~~~~~ 
+-------------------+ 
{
 "sender": "little.john@sherwood.forest",
 "recipient": "robin.hood@sherwood.forest",
 "message": "Have nought but a staff in my hand...",
 "comment": "Important Message",
 "signature": "L1I5VR9bAxyjJ..."
 "created": "14524355"
} 
+-------------------+  

 The values 'message', 'comment' and 'signature' are always Base64 encoded. 

**AuhtItem
~~~~~~~~~~~~~~ 

 (not yet designed)


 
*The Key-Management
~~~~~~~~~~~~~~ 
 All RSA keys managed by the ImixsCrypt Private Server are stored in the local server 
 directory /keys/. This directory contains your local private RSA key pair as also
 public keys from other users. 
 

*--------------*----------------------------------------------------------------* 
|| Directory   ||  Description                                                 ||
*--------------+----------------------------------------------------------------+
|/keys         | Contains the local key pair.                                   |
|              | id.rsa = private            									|
|              | id.rsa.pub = public key 										|
*--------------+----------------------------------------------------------------+
|/keys/public  | Contains public keys received from a imixs-crypt-public server |
|              | This kind of keys are not verified.  							|
|              | This means the identity could possibly have been corrupted. 	|
*--------------+----------------------------------------------------------------+
|/keys/trusted | Contains trusted public keys.                                	|
|              | You can copy a public key you trust her here.              	|
|              |                                                              	|
*--------------+----------------------------------------------------------------+
 
 To be sure to have a secure communication with other users you should copy a 
 trusted version of the public key into the /keys/trusted/ directory. 
 For example if you reciefe a local copy of the public key or you got the public 
 key through a secure pgp encrypted email. 
 
 
 
*The REST API
~~~~~~~~~~~~~~
 The ImixsCrypt-Private-Server provides a local REST API to manage identities and encrypt or
 decrypt messages using a locak RSA private and public key.
 
 
**SessionService 
~~~~~~~~~~~~~~
 To work with a local private RSA key which is password protected a client need to first
 start a new session. To open a new session for a specific identity a client post the private key password. 
 After a session was created a sessionId is stored in a cookie. A client can encrypt or decrypt messages 
 using the sessionId.
 The password and the sessionId used during a session are only stored in-memory.
  
*---------------------*----------*------------------------------------------* 
|| Resource URI       || Method  || Description                            ||
*---------------------+----------+------------------------------------------+
| /identities     	  |GET       |Returns the local public key of the default identity|
|                     |          |The default identity is stored in the 	|
|                     |          |properties and can be set with the POST method|
|                     |          |HTTP-202=no key found, HTTP-200=key found	|
*---------------------+----------+------------------------------------------+
| /identities/(id) 	  |GET       |Returns the local public key for a given identity|
|                     |          |HTTP-202=no key found, HTTP-200=key found	|
*---------------------+----------+------------------------------------------+
| /identities 		  |POST      |Posts a private key password and opens a  |
|                     |          |session for a specific identity.  		|
|                     |          |\{"id":"robin.hood@sherwood.forest","key": "my password"\} |
|                     |          |If no key-pair still exits and a password |
|                     |          |was provided then a new local key pair will be generated.      |
*---------------------+----------+---------------------------------------+
| /identities/		  |DELETE    |Closes the current session				|
|                     |          |session for a specific identity.  		|
|                     |          |\{"id":"robin.hood@sherwood.forest","key": ""\} |
*---------------------+----------+---------------------------------------+
 
 All methods receive or return a IdentityItem in JSON format.
 
 The POST method automatically updates the property "default.identity" with the 
 identity provided in the request. 
   
 
 

**IdentityService 
~~~~~~~~~~~~~~
 The IdentityService is used to manage public keys. 
  
*---------------------*----------*------------------------------------------* 
|| Resource URI       || Method  || Description                            ||
*---------------------+----------+------------------------------------------+
| /identities/(id)	  |GET       |Returns the public key of the specified identity|
|                     |          |A public key is stored locally in the /key/public/ direcotry|
*---------------------+----------+------------------------------------------+
| /identities?node=http://...	  |POST      |Posts a public key to a public internt server|
|                     |          |											|
*---------------------+----------+---------------------------------------+
 


**MessageService 
~~~~~~~~~~~~~~
 The MessageService is used to encrypt messages and 
 send them through the internet. 
  
*---------------------*----------*------------------------------------------* 
|| Resource URI       || Method  || Description                            ||
*---------------------+----------+------------------------------------------+
| /messages/		  |GET       |Returns a list with local messages		|
|                     |          |											|
*---------------------+----------+------------------------------------------+
| /messages?node=http://...	  |POST      |Posts a message. If the message did not contain a |
|                     |          |receifer than the message is encrypted localy with the local public key	|
|                     |          |To send a message over the Internet a query param |
|                     |          |'node' should be provided|
|                     |          |											|
*---------------------+----------+---------------------------------------+
 
   
  


 
*Property Management
~~~~~~~~~~~~~~
 The Rest API provides a way to read and set properties into the local property file.
 A valid session must be opened before. 
  
*---------------------*----------*------------------------------------------* 
|| Resource URI       || Method  || Description                            ||
*---------------------+----------+------------------------------------------+
| /session/properties/(key) |GET       |Returns the value of a property|
*---------------------+----------+------------------------------------------+
| /session/properties/(key) |POST      |Set a new value of a property |
*---------------------+----------+---------------------------------------+
 